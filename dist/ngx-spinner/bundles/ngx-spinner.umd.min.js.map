{"version":3,"sources":["../../../projects/ngx-spinner/src/lib/ngx-spinner.enum.ts","../../../projects/ngx-spinner/src/lib/ngx-spinner.service.ts","../../../projects/ngx-spinner/src/lib/safe-html.pipe.ts","../../../projects/ngx-spinner/src/lib/ngx-spinner.component.html","../../../projects/ngx-spinner/src/lib/ngx-spinner.component.ts","../../../projects/ngx-spinner/src/lib/ngx-spinner.module.ts"],"names":["LOADERS","ball-8bits","ball-atom","ball-beat","ball-circus","ball-climbing-dot","ball-clip-rotate","ball-clip-rotate-multiple","ball-clip-rotate-pulse","ball-elastic-dots","ball-fall","ball-fussion","ball-grid-beat","ball-grid-pulse","ball-newton-cradle","ball-pulse","ball-pulse-rise","ball-pulse-sync","ball-rotate","ball-running-dots","ball-scale","ball-scale-multiple","ball-scale-pulse","ball-scale-ripple","ball-scale-ripple-multiple","ball-spin","ball-spin-clockwise","ball-spin-clockwise-fade","ball-spin-clockwise-fade-rotating","ball-spin-fade","ball-spin-fade-rotating","ball-spin-rotate","ball-square-clockwise-spin","ball-square-spin","ball-triangle-path","ball-zig-zag","ball-zig-zag-deflect","cog","cube-transition","fire","line-scale","line-scale-party","line-scale-pulse-out","line-scale-pulse-out-rapid","line-spin-clockwise-fade","line-spin-clockwise-fade-rotating","line-spin-fade","line-spin-fade-rotating","pacman","square-jelly-box","square-loader","square-spin","timer","triangle-skew-spin","DEFAULTS","NgxSpinner","init","Object","assign","this","NgxSpinnerService","spinnerObservable","BehaviorSubject","prototype","getSpinner","name","asObservable","pipe","filter","x","show","spinner","_this","Promise","resolve","_reject","setTimeout","keys","length","next","hide","debounce","factory","ɵfac","providedIn","SafeHtmlPipe","_sanitizer","transform","v","bypassSecurityTrustHtml","i0.ɵɵelement","i0.ɵɵelementStart","i0.ɵɵtemplate","i0.ɵɵelementEnd","i0.ɵɵclassMap","i0.ɵɵstyleProp","i0.ɵɵadvance","i0.ɵɵproperty","i0.ɵɵprojection","ctx_r0","zIndex","fullScreen","i0","ɵɵdirectiveInject","i1","DomSanitizer","pure","NgxSpinnerComponent","spinnerService","changeDetector","ngUnsubscribe","Subject","setDefaultOptions","bdColor","size","color","type","divArray","divCount","template","ngOnInit","takeUntil","subscribe","onInputChange","markForCheck","ngOnChanges","changes","propName","changedProp","isFirstChange","currentValue","previousValue","getClass","Array","fill","map","i","sizeClass","toLowerCase","class","ngOnDestroy","complete","ChangeDetectorRef","selectors","inputs","features","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","rf","ctx","trigger","state","style","opacity","transition","animate","changeDetection","NgxSpinnerModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export const LOADERS = {\r\n  'ball-8bits': 16,\r\n  'ball-atom': 4,\r\n  'ball-beat': 3,\r\n  'ball-circus': 5,\r\n  'ball-climbing-dot': 4,\r\n  'ball-clip-rotate': 1,\r\n  'ball-clip-rotate-multiple': 2,\r\n  'ball-clip-rotate-pulse': 2,\r\n  'ball-elastic-dots': 5,\r\n  'ball-fall': 3,\r\n  'ball-fussion': 4,\r\n  'ball-grid-beat': 9,\r\n  'ball-grid-pulse': 9,\r\n  'ball-newton-cradle': 4,\r\n  'ball-pulse': 3,\r\n  'ball-pulse-rise': 5,\r\n  'ball-pulse-sync': 3,\r\n  'ball-rotate': 1,\r\n  'ball-running-dots': 5,\r\n  'ball-scale': 1,\r\n  'ball-scale-multiple': 3,\r\n  'ball-scale-pulse': 2,\r\n  'ball-scale-ripple': 1,\r\n  'ball-scale-ripple-multiple': 3,\r\n  'ball-spin': 8,\r\n  'ball-spin-clockwise': 8,\r\n  'ball-spin-clockwise-fade': 8,\r\n  'ball-spin-clockwise-fade-rotating': 8,\r\n  'ball-spin-fade': 8,\r\n  'ball-spin-fade-rotating': 8,\r\n  'ball-spin-rotate': 2,\r\n  'ball-square-clockwise-spin': 8,\r\n  'ball-square-spin': 8,\r\n  'ball-triangle-path': 3,\r\n  'ball-zig-zag': 2,\r\n  'ball-zig-zag-deflect': 2,\r\n  'cog': 1,\r\n  'cube-transition': 2,\r\n  'fire': 3,\r\n  'line-scale': 5,\r\n  'line-scale-party': 5,\r\n  'line-scale-pulse-out': 5,\r\n  'line-scale-pulse-out-rapid': 5,\r\n  'line-spin-clockwise-fade': 8,\r\n  'line-spin-clockwise-fade-rotating': 8,\r\n  'line-spin-fade': 8,\r\n  'line-spin-fade-rotating': 8,\r\n  'pacman': 6,\r\n  'square-jelly-box': 2,\r\n  'square-loader': 1,\r\n  'square-spin': 1,\r\n  'timer': 1,\r\n  'triangle-skew-spin': 1\r\n};\r\n\r\nexport const DEFAULTS = {\r\n  BD_COLOR: 'rgba(51,51,51,0.8)',\r\n  SPINNER_COLOR: '#fff',\r\n  SPINNER_TYPE: 'ball-scale-multiple',\r\n  Z_INDEX: 99999,\r\n};\r\n\r\nexport const PRIMARY_SPINNER = 'primary';\r\n\r\nexport type Size = 'default' | 'small' | 'medium' | 'large';\r\n\r\nexport interface Spinner {\r\n  bdColor?: string;\r\n  size?: Size;\r\n  color?: string;\r\n  type?: string;\r\n  fullScreen?: boolean;\r\n  zIndex?: number;\r\n  template?: string;\r\n}\r\n\r\nexport class NgxSpinner {\r\n  name: string;\r\n  bdColor: string;\r\n  size: Size;\r\n  color: string;\r\n  type: string;\r\n  class: string;\r\n  divCount: number;\r\n  divArray: Array<number>;\r\n  fullScreen: boolean;\r\n  show: boolean;\r\n  zIndex: number;\r\n  template: string;\r\n\r\n  constructor(init?: Partial<NgxSpinner>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { NgxSpinner, PRIMARY_SPINNER, Spinner } from './ngx-spinner.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxSpinnerService {\r\n  /**\r\n   * Spinner observable\r\n   *\r\n   * @memberof NgxSpinnerService\r\n   */\r\n  // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\r\n  private spinnerObservable = new BehaviorSubject<NgxSpinner>(null);\r\n  /**\r\n   * Creates an instance of NgxSpinnerService.\r\n   * @memberof NgxSpinnerService\r\n   */\r\n  constructor() { }\r\n  /**\r\n  * Get subscription of desired spinner\r\n  * @memberof NgxSpinnerService\r\n  **/\r\n  getSpinner(name: string): Observable<NgxSpinner> {\r\n    return this.spinnerObservable.asObservable().pipe(filter((x: NgxSpinner) => x && x.name === name));\r\n  }\r\n  /**\r\n   * To show spinner\r\n   *\r\n   * @memberof NgxSpinnerService\r\n   */\r\n  show(name: string = PRIMARY_SPINNER, spinner?: Spinner): Promise<boolean> {\r\n    return new Promise((resolve, _reject) => {\r\n      setTimeout(() => {\r\n        if (spinner && Object.keys(spinner).length) {\r\n          spinner['name'] = name;\r\n          this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\r\n          resolve(true);\r\n        } else {\r\n          this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\r\n          resolve(true);\r\n        }\r\n      }, 10);\r\n    });\r\n  }\r\n\r\n  /**\r\n  * To hide spinner\r\n  *\r\n  * @memberof NgxSpinnerService\r\n  */\r\n  hide(name: string = PRIMARY_SPINNER, debounce: number = 10): Promise<boolean> {\r\n    return new Promise((resolve, _reject) => {\r\n      setTimeout(() => {\r\n        this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\r\n        resolve(true);\r\n      }, debounce);\r\n    });\r\n  }\r\n\r\n}","import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'safeHtml'\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private _sanitizer: DomSanitizer) {\r\n  }\r\n\r\n  transform(v: string): SafeHtml {\r\n    if (v) {\r\n      return this._sanitizer.bypassSecurityTrustHtml(v);\r\n    }\r\n  }\r\n}\r\n","<div [@fadeIn]=\"'in'\" *ngIf=\"spinner.show\" class=\"overlay\" [style.background-color]=\"spinner.bdColor\"\r\n  [style.z-index]=\"spinner.zIndex\" [style.position]=\"spinner.fullScreen ? 'fixed' : 'absolute'\">\r\n  <div *ngIf=\"!template\" [class]=\"spinner.class\" [style.color]=\"spinner.color\">\r\n    <div *ngFor=\"let index of spinner.divArray\"></div>\r\n  </div>\r\n  <div *ngIf=\"template\" [innerHTML]=\"template | safeHtml\"></div>\r\n  <div class=\"loading-text\" [style.z-index]=\"spinner.zIndex\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>","import {\r\n  Component,\r\n  OnDestroy,\r\n  Input,\r\n  OnInit,\r\n  OnChanges,\r\n  SimpleChange,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { NgxSpinnerService } from './ngx-spinner.service';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { LOADERS, DEFAULTS, Size, NgxSpinner, PRIMARY_SPINNER } from './ngx-spinner.enum';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'ngx-spinner',\r\n  templateUrl: 'ngx-spinner.component.html',\r\n  styleUrls: ['ngx-spinner.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('fadeIn', [\r\n      state('in', style({ opacity: 1 })),\r\n      transition(':enter', [\r\n        style({ opacity: 0 }),\r\n        animate(300)\r\n      ]),\r\n      transition(':leave',\r\n        animate(200, style({ opacity: 0 })))\r\n    ])\r\n  ]\r\n})\r\nexport class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {\r\n\r\n  /**\r\n   * To set backdrop color\r\n   * Only supports RGBA color format\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  @Input() bdColor: string;\r\n  /**\r\n   * To set spinner size\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  @Input() size: Size;\r\n  /**\r\n   * To set spinner color(DEFAULTS.SPINNER_COLOR)\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  @Input() color: string;\r\n  /**\r\n   * To set type of spinner\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  @Input() type: string;\r\n  /**\r\n   * To toggle fullscreen mode\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  @Input() fullScreen: boolean;\r\n  /**\r\n   * Spinner name\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  @Input() name: string;\r\n  /**\r\n   * z-index value\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  @Input() zIndex: number;\r\n  /**\r\n   * Custom template for spinner/loader\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  @Input() template: string;\r\n  /**\r\n   * Spinner Object\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  spinner: NgxSpinner = new NgxSpinner();\r\n  /**\r\n   * Array for spinner's divs\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  divArray: Array<number>;\r\n  /**\r\n   * Counter for div\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   *\r\n   */\r\n  divCount: number;\r\n  /**\r\n   * Show spinner\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n  **/\r\n  show: boolean;\r\n  /**\r\n   * Unsubscribe from spinner's observable\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n  **/\r\n  ngUnsubscribe: Subject<void> = new Subject();\r\n\r\n  /**\r\n   * Creates an instance of NgxSpinnerComponent.\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  constructor(private spinnerService: NgxSpinnerService, private changeDetector: ChangeDetectorRef) {\r\n    this.bdColor = DEFAULTS.BD_COLOR;\r\n    this.zIndex = DEFAULTS.Z_INDEX;\r\n    this.color = DEFAULTS.SPINNER_COLOR;\r\n    this.type = DEFAULTS.SPINNER_TYPE;\r\n    this.size = 'large';\r\n    this.fullScreen = true;\r\n    this.name = PRIMARY_SPINNER;\r\n    this.template = null;\r\n\r\n    this.divArray = [];\r\n    this.divCount = 0;\r\n    this.show = false;\r\n  }\r\n  /**\r\n   * Initialization method\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  ngOnInit() {\r\n    this.setDefaultOptions();\r\n    this.spinnerService.getSpinner(this.name)\r\n      .pipe(\r\n        takeUntil(this.ngUnsubscribe)\r\n      )\r\n      .subscribe((spinner: NgxSpinner) => {\r\n        this.setDefaultOptions();\r\n        Object.assign(this.spinner, spinner);\r\n        if (spinner.show) {\r\n          this.onInputChange();\r\n        }\r\n        this.changeDetector.markForCheck();\r\n      });\r\n  }\r\n  /**\r\n   * To set default ngx-spinner options\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  setDefaultOptions = () => {\r\n    this.spinner = new NgxSpinner({\r\n      name: this.name,\r\n      bdColor: this.bdColor,\r\n      size: this.size,\r\n      color: this.color,\r\n      type: this.type,\r\n      fullScreen: this.fullScreen,\r\n      divArray: this.divArray,\r\n      divCount: this.divCount,\r\n      show: this.show,\r\n      zIndex: this.zIndex,\r\n      template: this.template,\r\n    });\r\n  }\r\n  /**\r\n   * On changes event for input variables\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\r\n    for (const propName in changes) {\r\n      if (propName) {\r\n        const changedProp = changes[propName];\r\n        if (changedProp.isFirstChange()) {\r\n          return;\r\n        } else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\r\n          if (changedProp.currentValue !== '') {\r\n            this.spinner[propName] = changedProp.currentValue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * To get class for spinner\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  getClass(type: string, size: Size): string {\r\n    this.spinner.divCount = LOADERS[type];\r\n    this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((x, i) => i);\r\n    let sizeClass = '';\r\n    switch (size.toLowerCase()) {\r\n      case 'small':\r\n        sizeClass = 'la-sm';\r\n        break;\r\n      case 'medium':\r\n        sizeClass = 'la-2x';\r\n        break;\r\n      case 'large':\r\n        sizeClass = 'la-3x';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return 'la-' + type + ' ' + sizeClass;\r\n  }\r\n  /**\r\n   * Check if input variables have changed\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  onInputChange() {\r\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\r\n  }\r\n  /**\r\n   * Component destroy event\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\r\n  ngOnDestroy() {\r\n    this.ngUnsubscribe.next();\r\n    this.ngUnsubscribe.complete();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxSpinnerComponent } from './ngx-spinner.component';\r\nimport { SafeHtmlPipe } from './safe-html.pipe';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [NgxSpinnerComponent, SafeHtmlPipe],\r\n  exports: [NgxSpinnerComponent]\r\n})\r\nexport class NgxSpinnerModule { }\r\n"]}